$        - Indicates you are a standard user. 
~        - Indicates you are in the home directory.
ls       - (l)ist (s)torage.
pwd      - (p)rint (w)ork (d)irectory.
cd       - (c)hange (d)irectory.
.        - Current directory.
..       - Previous directory.
~        - Alias to home directory.
pushd    - Move to new directory, but it will save the previous directory in the stack to allow go back to the previous directory.
popd     - Move back to the previous directory used by "pushd" command.
file     - Print the metadata of a given file.
locate   - Find a file location into the disk by the given name, the name can be the full name or partial name, the search will be done based on an index.
updatedb - Update dabase that is used to persist indexed OS files, it's used for commands like "locate" and others.
find     - Find a file location into the disk, the find will be done in real time, Ex: "find ~/ -name '*new*'".
which    - Show the path of a given command i.e: "which python"
history  - Show the latest 1000 commands typed on the bash.
man      - Will show the "manual" documentation for the given command, if you don't remember the full command name you can use "man -k <command-name>"
           to find similar commands with the given partial command name.
info     - A new way to show the manual of the given command, it's like a "man" but it's a new version and probaly better than "man".
whatis   - Will show a shorter descriptions what the given command does.
apropos  - Show a list of commands related with the given word parameter i.e: "apropos directory".
mkdir    - Create one or more new directories.
rmdir    - Remove one or more directories.
touch    - Create a new file if it does not exists or update the "last updated" attribute of the given file.
cp       - Copy a file or directory to another place.
mv       - Move a file or directory to another place or rename the file if any new path is given.
rm       - Remove a file or directory.
cat      - Show all the content of one or more given files.
echo     - Print the given text i.e (echo "Hello word!").
>        - Move the output of a previous command to a text file, every time this "command" will truncate the file i.e (echo "Hi" > hi.txt).
>>       - Move the output of a previous command to a text file, every time this "command" will append the content in the end of the file.
more     - Show the content of a given file on demand, but it's old and don't allow navigation.
less     - Show the content of a given file on demand, it's new and allow forward and backward navigation and other features.
|        - Pipe is behavior that allows a output of a command will be the input of another command i.e "history | less".
Ctrl+z   - Stop the current process in background.
Ctrl+c   - Kill the current process.
Ctrl+d   - It's exit the current session, like a new user session or a virtual terminal like python virtualenv.
exit     - Just close terminal or a user session and go out.
bg       - (b)ack (g)round, make the current program become a suspended job in background.
fg       - (f)ore(g)round, make the background process bring to the screen again and become the current program.
jobs     - List all stopped or suspended jobs in background.
killall  - Kill a process by name i.e: "killall firefox".
kill     - kill a process by sending a sign using PID i.e: "kill 12345" where 12345 is the process PID, -15 is to waiting the process
           ends his execution, -9 force stop in the process.
watch    - Execute a program periodically, showing output fullscreen, i.e: "watch free -h".
grep     - Print lines matching a pattern i.e: "grep rafael /etc/passwd".
sed      - (s)tream (ed)itor for filtering and transforming text, i.e: "sed 's/unix/linux/gI' os.txt" will replace "unix" by "linux",
           the "g" flag means "global", that is the whole file will be considered, "I" flag means "case insensitive", a new file will
           be printed in the stdout and the current file will not be changed, to change the current file the flag "-i" is necessary.
sort     - Ordering a file lines by alphanumerical order, if you want to reverse the order use "-r" option,
           to ordering by numerical values use "-n" option.
diff     - Print the difference between two files, Ex: "diff file1 file2" will print the difference file1 comparing with file2,
           the default option print a human readable output, but programmers use "-u" option more often because this output is used by other
           automated tools.
export   - Turn a shell variable in an environment variable, the main difference is that a shell variable exists only in the shell session
           can be accessed only in this scope, a environment variable is passed as a parameter for the programs executed with the shell,
           and a lot of these programs read some environment variables as options, example: export MYVAR.



Text editors:

vi       - Linux text editor.
vim      - Vi improved text editor.
nano     - Another text editor.


Host metrics:

du       - Estimate file space usage i.e: "du -h" where "-h" means "human-readable". 
df       - Report file system disk space usage i.e: "df -h" where "-h" means "human-readable".
free     - Display the amount of free and used memory in the system i.e: "free -h" means human-readable.
top      - Show linux process and host metrics like CPU and memory i.e: "top", you can use the bellow commands:
              "s" - To change the refresh timein the screen.
              "i" - To hide the iddle process and just show the active ones.
              "f" - To change the display fields.
              "k" - To kill a process by it's PID.
              "u" - To show the process list of a given user.
              "o" - To filter a process by his column and name.


Permissions:

user group everyone
rwx   rwx    rwx
|||   |||    |||
421   421    421 (bits)
\|/   \|/    \|/
 7     7      7

chmod    - (Ch)ange (mod)e command, used to change acess rights for each file into the system, ie: "chmod 755 myfile"
              The most used permissions are:
                 644 - Owner can read and write, group can read only, others can read only.
                 755 - Owner can read, write, and execute, group members and other users can read and execute, but cannot write.
                 777 - Everyone can read, write and execute (not recommended).
chown    - (Ch)ange (own)ership command, used to change ownership (user:group) of files and directories i.e: "chown user:group myfile".


Users and Groups

sudo     - Allow standard user to execute some action as admin user previligies, (su)per user (do) i.e "sudo apt-get update".
su -     - Change the standard user to the given user loading all settings and configuration of the given user, if any user is given then the root will be loaded, when it happens the console will print the "#" character, and the root directory "/" will be loaded.
users    - Show the current users logged in the system.
id       - Show all the information about your account.
adduser  - Add new user in the system.
passwd   - Change a password for a given user.
chfn     - Change the user profile.
usermod  - Modify a user account like lock or unlock a specific user.
deluser  - Remove a user from the system.
addgroup - Add new group in the system.
delgroup - Remove a group from the system.

/etc/passwd - All the users profile information is in this file.
/etc/group  - All the groups information is in this file.


System services control:

service   - Run a System V init script to control the programs that are running or to define a program to run as a daemon every time the system starts.
systemd   - Systemd system and service manager, the modern version to manager and boostrap programs.
systemctl - Control de systemd system and the service manager, allows to (start/stop/status) and (able/disable) programs as a daemons.


POSIX - Defines a common interface between the diferent flavors of linux and unix based system to guarantee those flavors have the same behaviour.


PATH - PATH is a special environment variable that contains the command path (or path for short). A command path is a list of system directories
       that the shell searches when trying to locate a command, For example, when you run "ls", the shell searches the directories listed in PATH
       for the "ls" program. If programs with the same name appear in several directories in the path, the shell runs the first matching program.
       If you run "echo $PATH", you'll se that the path components are separated by colons ":", for example: 
       
       "/usr/local/bin:/usr/bin:/bin"

       Setting a new path at the beginning: 
       
            PATH=/my/custom/dir:$PATH

       Setting a new path at the end:

            PATH=$PATH:/my/custom/dir


Standard Input and Standard Output

By default the Unix programs works as stream of texts, there are a default input stream "stdin" and two default outputs streams, the first one is "stdout"
and the second one is "stderr"

stdin -> Is refered as a "0" file descriptor and works as default input of a linux program, ex: "ls -la | grep .git",
         in this example the "stdin" of grep will receive the "stdout" of "ls -la"

stdout -> Is refered as a "1" file descriptor and works as default output of a linux program when it works as expected, ex: "ls -la > my-files",
          in this example the "stdout" of "ls -la" is redirect to a file instead of a default terminal output.

stderr -> Is refered as a "2" file descriptor and works as default error output of a linux program when something goes wrong, ex:
          "ls -la /invalid-dir/ > my-files 2> errors", in this example the success "stdout" will be redirect to file "my-files"
          and the error outputs to file "errors", if "2> errors" isn't given then the errors will be printed in the terminal.
          It's possible to redirect both the standard input and the standard output to the same file, ex: "ls -la /invalid-dir/ > my-files 2>&1"
